#summary How to use templates with EJS.

= Introduction =

EJS provides a lot of flexibility for using JavaScript templates.  This article documents EJS's template API.

EJS is typically used by loading a template and rendering it with data.

= Loading a template =

Load a template by creating a new EJS template:
{{{
template = new EJS({url: '/mytemplate.ejs'})
}}}
options is a hash that can include the following attributes:

  * url {string} - loads the template from a file
  * text {string} - uses the provided text as 
  * element {string or element} - 
  * type {string} (optional) - '<' or '[', default is '<', except for loading a template from an element.
  * name {string} (optional) - an optional name that is used for caching.  This defaults to the element ID or URL provided.
  * cache {boolean} (optional) - defaults to true.  True if you want to enable caching of templates, false if otherwise.

Once a template is loaded

= Use =

First, you have to create a place to store the templates:

{{{
var templates = new Templates();
}}}

Next, load the compiled template (EjsCompiler):

{{{
var template = templates.find('templates/test.ejs')
}}}

Finally, render the template with data by passing an object:

{{{
var result = template.process( {title: 'hello world', description: 'render this data'} )
}}}
or evaluating the compiled template
{{{
var result = eval(template.out)
}}}